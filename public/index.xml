<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technology and Language on Warkruid&#39;s Experiments</title>
    <link>https://www.warkruid.com/</link>
    <description>Recent content in Technology and Language on Warkruid&#39;s Experiments</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Apr 2022 09:18:12 +0200</lastBuildDate>
    
	<atom:link href="https://www.warkruid.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OpenSLL: Living Of The Land</title>
      <link>https://www.warkruid.com/posts/opensll_living_of_the_land/</link>
      <pubDate>Fri, 08 Apr 2022 09:18:12 +0200</pubDate>
      
      <guid>https://www.warkruid.com/posts/opensll_living_of_the_land/</guid>
      <description>There was a question on stackoverflow about the OpenSSL s_client functionality in relation to SMTP mail. This question seemed a &amp;ldquo;red team&amp;rdquo; question to me.
(Red Team stands for a team that attacks a site or service to test it&amp;rsquo;s security)
How can you use OpenSSL to send mail out of a system?
Let&amp;rsquo;s take a look.
You can pipe SMTP commands into openssl with &amp;ldquo;&amp;laquo;&amp;lt;&amp;rdquo;
SMTPSERVER=&amp;quot;smtp.example.com&amp;quot;SMTPPORT=587SMTPCOMMANDS=&amp;quot;QUIT&amp;quot;openssl s_client -crlf -quiet -starttls smtp -connect ${SMTPSERVER}:${SMTPPORT} &amp;lt;&amp;lt;&amp;lt; ${SMTPCOMMAND}Openssl connects to the smtp server via ttls and opens a command line shell.</description>
    </item>
    
    <item>
      <title>Make and Hugo</title>
      <link>https://www.warkruid.com/posts/makeandhugo/</link>
      <pubDate>Sat, 02 Apr 2022 20:49:25 +0200</pubDate>
      
      <guid>https://www.warkruid.com/posts/makeandhugo/</guid>
      <description>After a bit of experimenting with Hugo on the command line I quickly grew tired of typing in long and complex commandlines. Especially the commandline to push the repo to github was a special PITA.
So.. I made a quick and dirty Makefile which simplified things a bit.
SHELL=/bin/bash # make sure Make does not barf on unknown command %: #: # macro to read argument args = `arg=&amp;quot;$(filter-out $@,$(MAKECMDGOALS))&amp;quot; &amp;amp;&amp;amp; echo $${arg:-${1}}` test: build hugo server -D build: git pull hugo # make a new post post: hugo new posts/$(call args,&amp;quot;defaultstring&amp;quot;) git add content/en/posts/$(call args,&amp;quot;defaultstring&amp;quot;) # push to github with TOKEN read from environment push: git push https://warkruid:$(TOKEN)@github.</description>
    </item>
    
    <item>
      <title>Myfirstpost</title>
      <link>https://www.warkruid.com/posts/myfirstpost/</link>
      <pubDate>Fri, 01 Apr 2022 12:12:16 +0200</pubDate>
      
      <guid>https://www.warkruid.com/posts/myfirstpost/</guid>
      <description>My first post! Yay!</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.warkruid.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.warkruid.com/about/</guid>
      <description>Illustration from Victor Hugo et son temps (1881)   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Amet risus nullam eget felis eget nunc lobortis. Erat velit scelerisque in dictum non consectetur. Egestas congue quisque egestas diam in arcu cursus. Orci phasellus egestas tellus rutrum. Orci dapibus ultrices in iaculis nunc sed. Dui accumsan sit amet nulla.</description>
    </item>
    
  </channel>
</rss>